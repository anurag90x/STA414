par(pch=20,mar=c(5,3,1,1)+0.1,mfrow=c(1,3))
lambda <- 0.1
for (s in c(0.1,0.5,2.5))
{
beta <- penalized.least.squares (Phi(x.train,s), y.train, lambda)
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
q
q
print(as.vector(round(beta,3)))
plot (x.train, y.train,
xlab=paste("Gaussian basis function fit, s =",s," lambda =",lambda),
ylab="")
lines (x.grid, beta[1]+Phi(x.grid,s)%*%beta[-1], lwd=2, col="black")
lines (x.grid, y.grid, lwd=2, col="gray")
}
# FIND AND PRINT VALIDATION ARRAY FOR FIVE VALIDATION SETS.
cat("\n\nArrays of validation root mean squared error\n")
for (v in 1:5)
{
cat("\nUsing cases",(v-1)*10+1,"to",v*10,"for validation set:\n")
V <- val.array (x.train, y.train,
val.ix = ((v-1)*10+1) : (v*10),
try.lambda = c(0.001,0.01,0.1,1,10),
try.s = c(0.02,0.1,0.5,2.5))
print(round(sqrt(V),4))
if (v==1) Vave <- V
else Vave <- Vave + V
}
# FIND AND PRINT FIVE-FOLD CROSS VALIDATION ARRAY.
# R SCRIPT FOR WEEK 2 DEMONSTRATION.
source("gaussianBasis.r")
# GENERATE ARTIFICIAL DATA.
set.seed(2)
x.grid <- seq(0,1,0.005)
y.grid <- sin(1+x.grid^2)
x.all <- runif(1050)
y.all <- sin(1+x.all^2) + rnorm(1050,0,0.03)
x.train <- x.all[1:50]
y.train <- y.all[1:50]
# PLOT FIT WITH LAMBDA = 0.1 AND S = 0.1, 0.5, 2.5.
par(pch=20,mar=c(5,3,1,1)+0.1,mfrow=c(1,3))
lambda <- 0.1
for (s in c(0.1,0.5,2.5))
{
beta <- penalized.least.squares (Phi(x.train,s), y.train, lambda)
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
print(as.vector(round(beta,3)))
plot (x.train, y.train,
xlab=paste("Gaussian basis function fit, s =",s," lambda =",lambda),
ylab="")
lines (x.grid, beta[1]+Phi(x.grid,s)%*%beta[-1], lwd=2, col="black")
lines (x.grid, y.grid, lwd=2, col="gray")
}
# FIND AND PRINT VALIDATION ARRAY FOR FIVE VALIDATION SETS.
cat("\n\nArrays of validation root mean squared error\n")
for (v in 1:5)
{
cat("\nUsing cases",(v-1)*10+1,"to",v*10,"for validation set:\n")
V <- val.array (x.train, y.train,
val.ix = ((v-1)*10+1) : (v*10),
try.lambda = c(0.001,0.01,0.1,1,10),
try.s = c(0.02,0.1,0.5,2.5))
print(round(sqrt(V),4))
if (v==1) Vave <- V
else Vave <- Vave + V
}
# FIND AND PRINT FIVE-FOLD CROSS VALIDATION ARRAY.
Vave <- Vave/5
cat("\nUsing average of five validation sets:\n")
print(round(sqrt(Vave),4))
# R SCRIPT FOR WEEK 2 DEMONSTRATION.
source("gaussianBasis.r")
# GENERATE ARTIFICIAL DATA.
set.seed(2)
x.grid <- seq(0,1,0.005)
y.grid <- sin(1+x.grid^2)
x.all <- runif(1050)
y.all <- sin(1+x.all^2) + rnorm(1050,0,0.03)
x.train <- x.all[1:50]
y.train <- y.all[1:50]
# PLOT FIT WITH LAMBDA = 0.1 AND S = 0.1, 0.5, 2.5.
par(pch=20,mar=c(5,3,1,1)+0.1,mfrow=c(1,3))
lambda <- 0.1
for (s in c(0.1,0.5,2.5))
{
beta <- penalized.least.squares (Phi(x.train,s), y.train, lambda)
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
print(as.vector(round(beta,3)))
plot (x.train, y.train,
xlab=paste("Gaussian basis function fit, s =",s," lambda =",lambda),
ylab="")
lines (x.grid, beta[1]+Phi(x.grid,s)%*%beta[-1], lwd=2, col="black")
lines (x.grid, y.grid, lwd=2, col="gray")
}
# FIND AND PRINT VALIDATION ARRAY FOR FIVE VALIDATION SETS.
cat("\n\nArrays of validation root mean squared error\n")
for (v in 1:5)
{
cat("\nUsing cases",(v-1)*10+1,"to",v*10,"for validation set:\n")
V <- val.array (x.train, y.train,
val.ix = ((v-1)*10+1) : (v*10),
try.lambda = c(0.001,0.01,0.1,1,10),
try.s = c(0.02,0.1,0.5,2.5))
print(round(sqrt(V),4))
if (v==1) Vave <- V
else Vave <- Vave + V
}
# FIND AND PRINT FIVE-FOLD CROSS VALIDATION ARRAY.
Vave <- Vave/5
cat("\nUsing average of five validation sets:\n")
print(round(sqrt(Vave),4))
clear
cat("\014")
# R SCRIPT FOR WEEK 2 DEMONSTRATION.
source("gaussianBasis.r")
# GENERATE ARTIFICIAL DATA.
set.seed(2)
x.grid <- seq(0,1,0.005)
y.grid <- sin(1+x.grid^2)
x.all <- runif(1050)
y.all <- sin(1+x.all^2) + rnorm(1050,0,0.03)
x.train <- x.all[1:50]
y.train <- y.all[1:50]
# R SCRIPT FOR WEEK 2 DEMONSTRATION.
source("wk2funcs.r")
setwd("~/")
# R SCRIPT FOR WEEK 2 DEMONSTRATION.
source("wk2funcs.r")
# GENERATE ARTIFICIAL DATA.
set.seed(2)
cat("\014")
# R SCRIPT FOR WEEK 2 DEMONSTRATION.
source("wk2funcs.r")
# GENERATE ARTIFICIAL DATA.
set.seed(2)
x.grid <- seq(0,1,0.005)
y.grid <- sin(1+x.grid^2)
x.all <- runif(1050)
y.all <- sin(1+x.all^2) + rnorm(1050,0,0.03)
x.train <- x.all[1:50]
y.train <- y.all[1:50]
# PLOT FIT WITH LAMBDA = 0.1 AND S = 0.1, 0.5, 2.5.
par(pch=20,mar=c(5,3,1,1)+0.1,mfrow=c(1,3))
lambda <- 0.1
for (s in c(0.1,0.5,2.5))
{
beta <- penalized.least.squares (Phi(x.train,s), y.train, lambda)
cat ("\nGaussian basis function fit, s =",s," lambda =",lambda,"\n\n")
print(as.vector(round(beta,3)))
plot (x.train, y.train,
xlab=paste("Gaussian basis function fit, s =",s," lambda =",lambda),
ylab="")
lines (x.grid, beta[1]+Phi(x.grid,s)%*%beta[-1], lwd=2, col="black")
lines (x.grid, y.grid, lwd=2, col="gray")
}
# FIND AND PRINT VALIDATION ARRAY FOR FIVE VALIDATION SETS.
cat("\n\nArrays of validation root mean squared error\n")
for (v in 1:5)
{
cat("\nUsing cases",(v-1)*10+1,"to",v*10,"for validation set:\n")
V <- val.array (x.train, y.train,
val.ix = ((v-1)*10+1) : (v*10),
try.lambda = c(0.001,0.01,0.1,1,10),
try.s = c(0.02,0.1,0.5,2.5))
print(round(sqrt(V),4))
if (v==1) Vave <- V
else Vave <- Vave + V
}
# FIND AND PRINT FIVE-FOLD CROSS VALIDATION ARRAY.
Vave <- Vave/5
cat("\nUsing average of five validation sets:\n")
print(round(sqrt(Vave),4))
temp <- matrix (1,3,4)
temp
temp[,5]
temp[,2]
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r')
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
setwd("C:/Users/Anurag/Desktop/414/A1")
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/GPsquareExponentialCov.r', echo=TRUE)
source('C:/Users/Anurag/Desktop/414/A1/testing.r', echo=TRUE)
print(sample_sq_error_tr2)
print(sample_abs_error)
print(sample_abs_error_tr2)
print(sample_comb_error)
print(sample_comb_error_tr2)
cat("Importance Sampling Errors for 1000 points \n")
print(average_time_samp$elapsed/average_time_samp$replications)
print (average_time_samp_tr2$elapsed/average_time_samp_tr2$replications)
print (average_time_samp_abs$elapsed/average_time_samp_abs$replications)
print (average_time_samp_abs_tr2$elapsed/average_time_samp_abs_tr2$replications)
print (average_time_samp_combo$elapsed/average_time_samp_combo$replications)
print (average_time_samp_combo_tr2$elapsed/average_time_samp_combo_tr2$replications)
sink()
